package command

import (
	"fmt"
	"os"
	"strings"

	"github.com/adityarifqyfauzan/go-boilerplate/internal/helper"
)

// generate all container

func RefreshRepositoryContainer() error {
	wd, err := os.Getwd()
	if err != nil {
		return err
	}

	// Get all model names
	models := make([]string, 0)
	files, err := os.ReadDir(wd + "/internal/model")
	if err != nil {
		return err
	}
	for _, file := range files {
		if file.IsDir() || file.Name() == "model.go" {
			continue
		}

		modelName := helper.ToPascalCase(strings.Split(file.Name(), ".")[0])

		models = append(models, modelName)
	}

	// Get module name from go.mod
	modContent, err := os.ReadFile(wd + "/go.mod")
	if err != nil {
		return err
	}
	moduleName := strings.Split(strings.Split(string(modContent), "\n")[0], " ")[1]

	content := fmt.Sprintf(`
// Code generated by go-boilerplate. DO NOT EDIT.
package container

import (
	"%s/internal/model"
	"%s/internal/repository"
	"go.uber.org/dig"
)

func repositoryContainer(container *dig.Container) {
`, moduleName, moduleName)

	for _, model := range models {
		content += fmt.Sprintf(`
	if err := container.Provide(repository.NewRepository[model.%s]); err != nil {
		panic(err)
	}
`, model)
	}

	content += "}\n"

	// Write content to repository_container.go
	outputPath := wd + "/internal/container/repository_container.go"
	err = os.WriteFile(outputPath, []byte(content), 0644)
	if err != nil {
		return err
	}
	return nil
}

func RefreshModuleContainer() error {
	wd, err := os.Getwd()
	if err != nil {
		return err
	}

	modulPath := fmt.Sprintf("%s/internal/module", wd)
	dirs, err := os.ReadDir(modulPath)
	if err != nil {
		return err
	}

	// get all folder name in module folder
	moduls := make([]string, 0)
	for _, dir := range dirs {
		if dir.IsDir() {
			moduls = append(moduls, dir.Name())
		}
	}

	// container path
	containerPath := fmt.Sprintf("%s/internal/container", wd)

	// Get module name from go.mod
	modContent, err := os.ReadFile(wd + "/go.mod")
	if err != nil {
		return err
	}
	moduleName := strings.Split(strings.Split(string(modContent), "\n")[0], " ")[1]

	// generate content
	content := fmt.Sprintf(`
// Code generated by go-boilerplate. DO NOT EDIT.
package container

import (
	"go.uber.org/dig"
`)

	for _, modul := range moduls {
		content += fmt.Sprintf(`
	"%s/internal/module/%s"`, moduleName, modul)
	}

	content += ")\n"

	content += fmt.Sprintf(`
func moduleContainer(container *dig.Container) {
`)

	for _, modul := range moduls {
		content += fmt.Sprintf(`
	%s.InitContainer(container)`, modul)
	}

	content += "\n}"

	// write content to module_container.go
	outputPath := containerPath + "/module_container.go"
	err = os.WriteFile(outputPath, []byte(content), 0644)
	if err != nil {
		return err
	}

	return nil
}
